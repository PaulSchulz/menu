#!/usr/bin/lua

local basedir   = "m"
local directory = {}
local prompt    = "> "
local banner    = [[
 _ __ ___   ___ _ __  _   _
| '_ ` _ \ / _ \ '_ \| | | |
| | | | | |  __/ | | | |_| |
|_| |_| |_|\___|_| |_|\__,_|

To exit:               C-c C-c
To go up a menu level: q
]]

local cmd
if arg[1] then
   basedir = arg[1] .. "/m"
end

print("Menu base directory: " .. basedir)
cmd = '[ -e "' .. basedir .. '" ]'
if os.execute(cmd) then
   io.write "  it exists"
   cmd = '[ -d "' .. basedir .. '" ]'
   if os.execute(cmd) then
      io.write " and is a directory"
   else
      io.write " but is isn't a directory"
   end
   io.write "\n"
end

--[[
Requirements:
  See: README.md
--]]

function usage ()
   print([[
menu [directory]

  The optional [directory] parameter may be an absolute or relative
  directory path, with or without a trailing '/'.

  The menu scripts are contained in 'm' subdirectory.
]])
end

function show_splash ()
   print(banner)
end

-- Create dirctory path from directory map 
function make_path (directory)
   local path = basedir
   for _,v in ipairs(directory) do
      path = path.."/"..v
   end
   return path
end

-- Create map from directory contents
-- The 'ls -F' adds special postfix character to indicate the
-- type of file. This is used later. See below for details.
function scandir (directory)
   local i = 0
   local t = {}
   local path = make_path(directory)
   local pfile = io.popen('ls -F "'..path..'"')
   for filename in pfile:lines() do
      i = i + 1
      t[i] = filename
    end
    pfile:close()
    return t
end

-- Given a directory map, display the contents of that directory as a
-- menu. Return the key options in a map.
function show_menu (directory)
   local items = scandir(directory)
   local options = {}
   
   for _, item in ipairs(items) do
      local shortcut  = string.sub(item, 1, 1)
      local label     = string.sub(item, 3, string.len(item)-1) 
      local type      = string.sub(item, -1)

      local item      = string.sub(item, 1, string.len(item)-1) -- remove type
      --[[
        @ means symbolic link (or that the file has extended attributes).
        * means executable.
	= means socket.
	| means named pipe.
        > means door.
        / means directory.
      --]]

      if type == '/' then
	 label = label .. " -->"
      elseif type == "*" then
	 label = label
      end
      options[shortcut] = {type=type,
			   item=item,
			   label=label}
      print("["..shortcut.."] - "..label)
   end

   return options
end

function show_prompt(prompt)
   io.write(prompt)
end

-- Get a charcter of input from keyboard on UNIX/Linux platform.
function getch_unix() 
   os.execute("stty cbreak </dev/tty >/dev/tty 2>&1") 
   local key = io.read(1) 
   os.execute("stty -cbreak </dev/tty >/dev/tty 2>&1"); 
   return(key);       
end 

-- Get menu input.
function get_input()
   -- return io.read()
   return getch_unix()
end

-- Main Loop
show_splash()

local run = true
local line = ""
while run do
   local options = show_menu(directory)
   show_prompt(prompt)
   line = get_input()
   print("")
   if line == "q" then
      -- FIXME: The following needs to be fixed.. test for empty directory map.
      if directory == {} then
	 run = false
      else
	 table.remove(directory)
      end
   elseif options[line] then
      local option = options[line]
      -- directory (sub-menu)
      if option["type"] == "/" then
	 table.insert(directory, option["item"])
      elseif option["type"] == "*" then
	 local command = make_path(directory).."/"..option["item"]
	 os.execute(command)
      end
      -- print(option["item"])
   end
end

print("")
